<HTML>
    <head>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
        <script src="https://d3js.org/d3.v4.min.js"></script>
        <script src = "https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
        <style> 
          .tooltip {
            fill: white;
            stroke: #000;
            display: inline;
            position: fixed;

          }

          .tooltip-date, .tooltip-likes {
          font-weight: bold;
          }
        </style>
        <script type='text/javascript'>
            
            // <!-- getting variables from table -->
            var graphInformation = '<%-JSON.stringify(sendGraphInfo)%>';
            var csvInformation = '<%-JSON.stringify(parsedCsv)%>';
            
            graphInfo = JSON.parse(graphInformation);
            csvInformation = JSON.parse(csvInformation);
            
            var stupacDatum = "";
            var midOdabrano = [];
            var trueOdabrano = [];
            var keyX = "";
            var variableNames = [];
            boxPlotArray = [];
            keysY = [];
            valuesY = [];
            colors = [ "red","blue","magenta","cyan","green","yellow","orange","black","purple"];
            line = [];
            // id 
            csvId = graphInfo.rows[0].id;
            graphLink = "http:localhost:3001/graph" + csvId;
            //csvname
            csvName = graphInfo.rows[0].csvname;
            //graph type
            graphName = graphInfo.rows[0].graph;
            //firstVariable
            firstVar = graphInfo.rows[0].var1;
            //secondVariable
            secondVar = graphInfo.rows[0].var2;
            //thirdVariable
            thirdVar = graphInfo.rows[0].var3;
            //fourthariable
            fourthVar = graphInfo.rows[0].var4;
            //fifthVariable
            fifthVar = graphInfo.rows[0].var5;
            
            midOdabrano.push(firstVar,secondVar,thirdVar,fourthVar,fifthVar);
            midOdabrano.forEach(function(e){
              if (e != null){
                  trueOdabrano.push(e);
              }
            })
            
        
            
        </script>
    </head>
    <body>
        <div  id="nacrtajGraf"></div>
        <script>
                    

            //check if there is any dates in csv
            d3.keys(csvInformation[1]).forEach(
              function(d){
                datum = moment(csvInformation[1][d],"YYYY-MM-DD",true);
                if(datum > 0){
                  stupacDatum = d;
                  //trim jer "date" je zapravo "date "
                }
              }
            )

            var headerNames = d3.keys(csvInformation[0]);
            
            keyX = trueOdabrano[0];
            
            keysY = trueOdabrano.slice(1);

            csvInformation.sort((x,y) => {
              a = x[keyX];
              b = y[keyX];
              if (a > b) { return 1; } if( a < b) { return -1; } return 0;
            });

            csvInformation.forEach(
              function(row){
                keysY.forEach(
                  function(key){
                    valuesY.push(row[key]);
                  }
                )
              }
            )

            var minValuesY = parseFloat(Math.min.apply(null, valuesY));
            var maxValuesY = parseFloat(Math.max.apply(null, valuesY));
            var ponderedMinValue = (minValuesY - minValuesY*0.2).toFixed(2);
            var ponderedMaxValue = (maxValuesY + maxValuesY*0.2).toFixed(2);
            //parsiranje datuma
           
            if(!(stupacDatum === "")){
                csvInformation.forEach(function(row){
                  row[stupacDatum] = Date.parse(row[stupacDatum]);
                })
            }

            
            //linijski
            if(graphName == "Linijski grafikon"){
              var margin = { top: 30, right: 120, bottom: 30, left: 50 },
                    width = 790 - margin.left - margin.right,
                    height = 360 - margin.top - margin.bottom,
                    tooltip = { width: 100, height: 100, x: 10, y: -30 };

              var svg = d3.select("#nacrtajGraf").append("svg")
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                      .append("g")
                          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

              if(stupacDatum == keyX){
                var x = d3.scaleTime()
                  .domain(d3.extent(csvInformation, function(d) { return d[keyX]; }))
                  .nice()
                  .range([0,width]);  
              }
              else {
                var x = d3.scaleLinear()
                  .domain(d3.extent(csvInformation, function(d) { return d[keyX]; }))
                  .nice()
                  .range([0,width]);  
              }
              
              xAxis = svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));

              var y = d3.scaleLinear()
                //.domain([ponderedMinValue,ponderedMaxValue])
                .domain([d3.min(valuesY), d3.max(valuesY)])
                .nice()
                .range([ height, 0 ]);
              
              yAxis = svg.append("g")
                .attr("height", d3.max(valuesY))
                .call(d3.axisLeft(y));
              
              //zoom
              var clip = svg.append("defs")
                                .append("svg:clipPath")
                                .attr("id","clip")
                                .append("svg:rect")
                                    .attr("width", width)
                                    .attr("height",height)
                                    .attr("x",0)
                                    .attr("y",0);
                        
              var brush = d3.brushX()
                  .extent( [ [0,0], [width,height]])
                  .on("end", updateChart);
          
              keysY.forEach(function(d,i){
                  line[i] = svg.append("g")
                      .attr("clip-path","url(#clip)");
              });
          
              keysY.forEach(
                  function(key,i){
                      line[i].append("path")
                          .data([csvInformation])
                          .attr("fill","none")
                          .attr("stroke",colors[i])
                          .attr("stroke-width", 1.5)
                          .attr("class","line")
                          // .style("stroke","red")
                          .attr("d",d3.line()
                              .x(function(d) { return x(d[keyX])})
                              .y(function(d){ return y(d[key])}));
                  }
              );
              
              line[0].append("g")
                  .attr("class","brush")
                  .call(brush);
          
              var idleTimeout
              function idled() { idleTimeout = null; }

              function updateChart(){
                  extent = d3.event.selection;

                  if(!extent){
                      if(!idleTimeout) return idleTimeout = setTimeout(idled,350);
                      x.domain([4,8]);
                  }
                  else{
                      x.domain([x.invert(extent[0]), x.invert(extent[1])]);
                      keysY.forEach(function(d,i){
                          line[i].select(".brush")
                              .call(brush.move,null);
                      });
                      
                  }
                  xAxis.transition()
                      .duration(1000)
                      .call(d3.axisBottom(x));
                  
                  keysY.forEach(
                  function(key,i){
                          line[i].select(".line")
                              .transition()
                              .duration(1000)
                              .attr("d",d3.line()
                                  .x(function(d){ return x(d[keyX])})
                                  .y(function(d){ return y(d[key])})
                          )
                      }
                  );
              }
              svg.on("dblclick",function(){
                  x.domain(d3.extent(csvInformation,function(d){return d[keyX]}))
                  xAxis.transition().call(d3.axisBottom(x))
                  keysY.forEach(
                  function(key,i){
                          line[i].select(".line")
                          .transition()
                          .attr("d",d3.line()
                              .x(function(d){ return x(d[keyX])})
                              .y(function(d){ return y(d[key])})
                          )
                      }
                  )
              });
              legend = svg.append("g");
                  

              legend.selectAll("mydots")
                  .data(keysY)
                  .enter()
                  .append("circle")
                      .attr("cx",800)
                      .attr("cy",function(d,i){ return 5 + i*25})
                      .attr("r",7)
                      .style("fill",function(d,i){ return colors[i]})
                  
              legend.selectAll("mylabels")
                  .data(keysY)
                  .enter()
                  .append("text")
                      .attr("x",813)
                      .attr("y",function(d,i){ return 10 + i* 25})
                      .style("fill",function(d,i){ return colors[i]})
                      .text(function(d){return d})
                      .attr("text-anchor","left")
                      .style("alingment-baseline","middle");



            }

            else if(graphName == "Histogram"){
              var margin = {top: 10, right: 30, bottom: 30, left: 40},
                        width = 460 - margin.left - margin.right,
                        height = 400 - margin.top - margin.bottom;
                        
              var svg = d3.select("#nacrtajGraf")
                  .append("svg")
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                  .append("g")
                      .attr("transform",
                          "translate(" + margin.left + "," + margin.top + ")");

              var binsInput = d3.select("#nacrtajGraf").append("p");
              binsInput.append("label").append("text").text("# bins");
              binsInput.append("input").attr("type","number").attr("min","1").attr("max","100").attr("step","30").attr("value","20").attr("id","nBin");

              if(trueOdabrano.length == 1){
                var x = d3.scaleLinear()
                  .domain([0, d3.max(csvInformation, function(d){ return d[keyX]; })]) ////
                  .range([0, width]);
              }
              else if(trueOdabrano.length == 2){
                var x = d3.scaleLinear()
                  .domain([d3.min(csvInformation, function(d){ return d[keysY]; }), d3.max(csvInformation, function(d){ return d[keysY]; })])
                  .range([0,width]);
              }

              svg.append("g")
                  .attr("transform", "translate(0," + height + ")")
                  .call(d3.axisBottom(x));

              var y = d3.scaleLinear()
                .range([height,0]);
              console.log(trueOdabrano);
              var yAxis = svg.append("g");

              function update(nBin){
                  if(trueOdabrano.length == 1){
                    var histogram = d3.histogram()
                      .value(function(d) { return d[keyX]; })
                      .domain(x.domain())
                      .thresholds(x.ticks(nBin));
                    
                    var bins1 = histogram(csvInformation);
                  }
                  else if(trueOdabrano.length == 2){
                    var histogram = d3.histogram()
                      .value(function(d){ return +d[keysY]; })
                      .domain(x.domain())
                      .thresholds(x.ticks(nBin));


                    csvInformation.forEach(
                      function(d){
                        console.log(d[keyX]);
                          if(variableNames.indexOf(d[keyX]) === -1){
                            variableNames.push(d[keyX]);
                          }
                      }
                    )
                    console.log(variableNames);
                    var bins1 = histogram(csvInformation.filter(function(d){ return d[keyX] === variableNames[0]}));
                    var bins2 = histogram(csvInformation.filter(function(d){ return d[keyX] === variableNames[1]}));
                    console.log(bins1);
                    console.log(bins2);
                  }

                  y.domain([0, d3.max(bins1, function(d) { return d.length; })]);
                  yAxis
                    .transition()
                    .duration(1000)
                    .call(d3.axisLeft(y));

                    if(trueOdabrano.length == 1){
                                var u = svg.selectAll("rect")
                                .data(bins1);
                                u 
                                    .enter()
                                    .append("rect")
                                    .merge(u)
                                    .transition()
                                    .duration(1000)
                                    .attr("x", 1)
                                        .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
                                        .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
                                        .attr("height", function(d) { return height - y(d.length); })
                                        .style("fill", "#69b3a2")
                                    
                                u
                                    .exit()
                                    .remove()
                            }
                            else if(trueOdabrano.length == 2){
                                var u1 = svg.selectAll("rect")
                                .data(bins1);
                                u1 
                                    .enter()
                                    .append("rect")
                                    .merge(u1)
                                    .transition()
                                    .duration(1000)
                                    .attr("x", 1)
                                        .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
                                        .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
                                        .attr("height", function(d) { return height - y(d.length); })
                                        .style("fill", "#69b3a2")
                                        .style("opacity",0.6)
                                    
                                u1
                                    .exit()
                                    .remove()

                                var u2 = svg.selectAll("rect2")
                                .data(bins2);
                                u2 
                                    .enter()
                                    .append("rect")
                                    .merge(u2)
                                    .transition()
                                    .duration(1000)
                                    .attr("x", 1)
                                        .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
                                        .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
                                        .attr("height", function(d) { return height - y(d.length); })
                                        .style("fill", "#404080")
                                        .style("opacity",0.4)
                                    
                                u2
                                    .exit()
                                    .remove()



                            }
              }
              update(20);
              d3.select("#nBin").on("input", function(){
                update(+this.value);
              });

            }

            else if(graphName == "Box plot"){
              var margin = {top: 10, right: 30, bottom: 30, left: 40},
                        width = 400 - margin.left - margin.right,
                        height = 400 - margin.top - margin.bottom;

              var svg = d3.select("#nacrtajGraf")
                  .append("svg")
                  .attr("width", width + margin.left + margin.right)
                  .attr("height", height + margin.top + margin.bottom)
                  .append("g")
                  .attr("transform",
                          "translate(" + margin.left + "," + margin.top + ")");

              csvInformation.forEach(function(d,i){
                  boxPlotArray[i] = d[keyX];
              })

              var data_sorted = boxPlotArray.sort((a,b) => a-b);
              var q1 = d3.quantile(data_sorted, .25);
              var median = d3.quantile(data_sorted, .5);
              var q3 = d3.quantile(data_sorted, .75);
              var interQuantileRange = q3 - q1;
              var min = q1 - 1.5 * interQuantileRange;
              var max = q1 + 1.5 * interQuantileRange; 
              
              var y = d3.scaleLinear()
                .domain([0,Math.max.apply(null,data_sorted)])
                .range([height, 0]);
                svg.call(d3.axisLeft(y));

              var center = 200;
              var width = 100;

              svg
                .append("line")
                .attr("x1", center)
                .attr("x2", center)
                .attr("y1", y(min) )
                .attr("y2", y(max) )
                .attr("stroke", "black");
              
                svg
                  .append("rect")
                  .attr("x", center - width/2)
                  .attr("y", y(q3) )
                  .attr("height", (y(q1)-y(q3)) )
                  .attr("width", width )
                  .attr("stroke", "black")
                  .style("fill", "#69b3a2");

                svg
                  .selectAll("toto")
                  .data([min, median, max])
                  .enter()
                  .append("line")
                  .attr("x1", center-width/2)
                  .attr("x2", center+width/2)
                  .attr("y1", function(d){ return(y(d))} )
                  .attr("y2", function(d){ return(y(d))} )
                  .attr("stroke", "black");

            }

            else if(graphName == "Scatter plot"){
              var margin = {top: 10, right: 30, bottom: 30, left: 60},
                  width = 460 - margin.left - margin.right,
                  height = 400 - margin.top - margin.bottom;

              var svg = d3.select("#nacrtajGraf")
                  .append("svg")
                      .attr("class",".drawn-graph")
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                  .append("g")
                      .attr("transform",
                          "translate(" + margin.left + "," + margin.top + ")");

              var x = d3.scaleLinear()
                .domain([0,0])
                .range([ 0, width ]);    

              svg.append("g")
                          .attr("class","myXaxis")
                          .attr("transform", "translate(0," + height + ")")
                          .call(d3.axisBottom(x))
                          .attr("opacity","0");
              
    
              var y = d3.scaleLinear()
                .domain([0,d3.max(csvInformation,function(d){ return +d[keysY];})])
                .range([ height, 0]);
              
              svg.append("g")
                .call(d3.axisLeft(y));

              var myCircle = svg.append('g')
                          .selectAll("dot")
                          .data(csvInformation)
                          .enter()
                          .append("circle")
                          .attr("cx", function (d) { return x(d[keyX]); } )
                          .attr("cy", function (d) { return y(d[keysY]); } )
                          .attr("r", 1.5)
                          .style("fill", "#69b3a2");
              
              x.domain([0,d3.max(csvInformation,function(d){ return +d[keyX];})])

              svg.select(".myXaxis")
                            .transition()
                            .duration(2000)
                            .attr("opacity","1")
                            .call(d3.axisBottom(x));
                        
              svg.selectAll("circle")
                .transition()
                .delay(function(d,i){ return (i*3)})
                .duration(2000)
                .attr("cx", function (d) { return x(d[keyX]); } )
                .attr("cy", function (d) { return y(d[keysY]); } )

              svg.call ( d3.brush()
                            .extent( [ [0,0] , [width,height]])
                            .on("start brush", refreshChartBold)
                        );
              
              function refreshChartBold(){
                  extent = d3.event.selection
                  myCircle.classed("selected", function(d){ return isBrushed(extent, x(d[keyX]), y(d[keysY]))})
              }

              function isBrushed(brush_coords, cx, cy){
                  var x0 = brush_coords[0][0],
                      x1 = brush_coords[1][0],
                      y0 = brush_coords[0][1],
                      y1 = brush_coords[1][1];
                  return x0 <= cx && cx <= x1 && y0 <=cy && cy <=y1;
              }



            }

            else if(graphName == "Bar plot"){
              var margin = {top: 30, right: 30, bottom: 70, left: 60},
                      width = 460 - margin.left - margin.right,
                      height = 400 - margin.top - margin.bottom;
              
              var svg = d3.select("#nacrtajGraf")
                    .append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                        .attr("transform",
                            "translate(" + margin.left + "," + margin.top + ")");

              csvInformation.sort(function(b,a){
                return a.Value - b.Value;
              });

              var x = d3.scaleBand()
                      .range([ 0, width ])
                      .domain(csvInformation.map(function(d) { return d[keyX]; }))
                      .padding(0.2);
              
              svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x))
                    .selectAll("text")
                        .attr("transform", "translate(-10,0)rotate(-45)")
                        .style("text-anchor", "end");

              var y = d3.scaleLinear()
                  .domain([0, 13000])
                  .range([ height, 0]);
                  svg.append("g")
                  .call(d3.axisLeft(y));

              svg.selectAll("mybar")
                    .data(csvInformation)
                    .enter()
                    .append("rect")
                        .attr("x", function(d) { return x(d[keyX]); })
                        .attr("y", function(d) { return y(d[keysY]); })
                        .attr("width", x.bandwidth())
                        .attr("height", function(d) { return height - y(d[keysY]); })
                        .attr("fill", "#69b3a2");

            }

            else if(graphName == "Heat map"){
              var margin = {top: 30, right: 30, bottom: 30, left: 30},
                          width = 450 - margin.left - margin.right,
                          height = 450 - margin.top - margin.bottom;
                
              var svg = d3.select("#nacrtajGraf")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform",
                        "translate(" + margin.left + "," + margin.top + ")"); 
              
              groupNames = [];

              csvInformation.forEach(
                function(d){
                    if(groupNames.indexOf(d[keyX]) === -1){
                        groupNames.push(d[keyX]);
                    }
                    if(variableNames.indexOf(d[keysY[0]]) === -1){
                        variableNames.push(d[keysY[0]]);
                    }
                }
              )

              var x = d3.scaleBand()
                  .range([ 0, width ])
                  .domain(groupNames)
                  .padding(0.05);

              svg.append("g")
                        .style("font-size",15)
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x).tickSize(0));
              
              var y = d3.scaleBand()
                  .range([ height, 0 ])
                  .domain(variableNames)
                  .padding(0.05);

              svg.append("g")
                        .style("font-size",15)
                        .call(d3.axisLeft(y).tickSize(0))
                        .select(".domain").remove();
              
              var myColor = d3.scaleSequential()
                  .interpolator(d3.interpolateInferno)
                  .domain([1,100]);

              var tooltipH = d3.select("#nacrtajGraf")
                        .append("div")
                        .style("opacity",0)
                        .attr("class","tooltip")
                        .style("background-color","white")
                        .style("border","solid")
                        .style("border-width","2px")
                        .style("border-radius","5px")
                        .style("padding","5px")
                  
              var mouseover = function(d){
                  tooltipH
                      .style("opacity",1)
                  d3.select(this)
                      .style("stroke","black")
                      .style("opacity",1)
              }

              var mousemove = function(d){
                  tooltipH
                      .html("The exact value of <br>this cell is: " + d[keysY[1]])
                      .style("left", (d3.mouse(this)[0]+70) + "px")
                      .style("top", (d3.mouse(this)[1]) + "px")
              }

              var mouseleave = function(d){
                  tooltipH
                      .style("opacity",0)
                  d3.select(this)
                      .style("stroke","none")
                      .style("opacity",0.8)
              }

              svg.selectAll()
                  .data(csvInformation, function(d) {return d[keyX]+':'+d[keysY[0]];})
                  .enter()
                  .append("rect")
                      .attr("x", function(d) { return x(d[keyX]) })
                      .attr("y", function(d) { return y(d[keysY[0]]) })
                      .attr("rx",4)
                      .attr("ry",4)
                      .attr("width", x.bandwidth() )
                      .attr("height", y.bandwidth() )
                      .style("fill", function(d) { return myColor(d[keysY[1]])} )
                      .style("stroke-width",4)
                      .style("stroke","none")
                      .style("opacity",0.8)
                  .on("mouseover",mouseover)
                  .on("mousemove",mousemove)
                  .on("mouseleave",mouseleave);

            }
                   


                      

</script>
   
    
   

    </body>
    <!-- <h2>graph </h2>
    <script type='text/javascript'>
        
        
    </script>
    <h1> 
        <script>
             document.write(csvId, csvName, graphName, firstVar, secondVar, thirdVar, fourthVar, fifthVar);
            document.write(csvInformation);
             
        </script> </h1> -->
     
</HTML>