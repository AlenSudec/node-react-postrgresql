{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alens\\\\OneDrive\\\\Radna povr\\u0161ina\\\\Novi materijali\\\\diplomski react node sql\\\\client\\\\src\\\\components\\\\UploadGraph\\\\Upload.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios'; //stepper\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: 'inline-block'\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return ['Upload CSV file', 'Choose variables', 'Choose type of graphicon'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return /*#__PURE__*/_jsxDEV(Button, {\n        children: \"sss\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this);\n\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n} //logic\n\n\nconst Upload = () => {\n  _s();\n\n  //stepper p2\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState({});\n  const steps = getSteps();\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n    // find the first step that has been completed\n    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted({});\n  }; //end of steppper\n\n\n  const [selectedFile, setSelectedFile] = useState();\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  const [isFileSubmitted, setIsFileSubmitted] = useState(false);\n  const [selectedHeaders, setSelectedHeaders] = useState();\n  const [isHeaderPicked, setIsHeaderPicked] = useState(false);\n  const d = new Date();\n  let chosenVariables = [];\n  let typesGraphicons = ['Linijski grafikon', 'Histogram', 'Box plot', 'Scatter plot', 'Bar plot', 'Heat map'];\n  let chosenGraph = -1;\n\n  const changeHandler = event => {\n    setSelectedFile(event.target.files[0]);\n    console.log(event.target.files[0]);\n    setIsFilePicked(true);\n  }; //uploading csv to server\n\n\n  const handleSubmission = () => {\n    console.log(\"handleUpload started\");\n    const data = new FormData();\n    data.append('file', selectedFile);\n    axios.post(\"http://localhost:3001/upload\", data, {}).then(res => {\n      console.log(res.statusText);\n    });\n    submit();\n    setIsFileSubmitted(true);\n  }; //getHeaders from selectedfile csv\n\n\n  const submit = () => {\n    const file = selectedFile;\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      const text = e.target.result;\n      console.log(text);\n      processCsv(text);\n    };\n\n    reader.readAsText(file);\n  };\n\n  const processCsv = (str, delim = \",\") => {\n    setSelectedHeaders(str.slice(0, str.indexOf('\\r\\n')).split(delim));\n    setIsHeaderPicked(true);\n    console.log(selectedHeaders);\n  };\n\n  const saveChosenVariables = e => {\n    if (chosenVariables.indexOf(e) === -1) {\n      chosenVariables.push(e);\n      console.log(chosenVariables);\n    } else if (chosenVariables.indexOf(e) !== -1) {\n      chosenVariables.splice(chosenVariables.indexOf(e), 1);\n      console.log(chosenVariables);\n    }\n  }; //Date.now() + '-' + file.originalname\n  //putting csvfile name in database\n\n\n  const handleDatabase = () => {\n    console.log(\"handleDB started\");\n    let csvName = d.getDate() + '-' + (d.getMonth() + 1) + '-' + selectedFile.name;\n    axios.post(\"http://localhost:3001/list\", {\n      csvname: csvName,\n      graph: chosenGraph,\n      var1: chosenVariables[0],\n      var2: chosenVariables[1],\n      var3: chosenVariables[2],\n      var4: chosenVariables[3],\n      var5: chosenVariables[4]\n    }).then(res => {\n      console.log(res.statusText);\n    }); // fetch(\"http://localhost:3001/list\", {\n    // \tmethod: 'POST',\n    // \theaders: {\n    // \t\t'Content-Type' : 'application/json',\n    // \t},\n    // \tbody: JSON.stringify({csvName}),\n    // }).catch(error => {\n    // \tconsole.log(error);\n    // })\n    // .then(response => {\n    // \tconsole.log(response);\n    // \treturn response.text();\n    // });\n  };\n\n  return (\n    /*#__PURE__*/\n    //stepper html\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(Stepper, {\n          nonLinear: true,\n          activeStep: activeStep,\n          children: steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n            children: /*#__PURE__*/_jsxDEV(StepButton, {\n              onClick: handleStep(index),\n              completed: completed[index],\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 7\n            }, this)\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 6\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: allStepsCompleted() ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.instructions,\n              children: \"All steps completed - youre finished\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleReset,\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 6\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.instructions,\n              children: getStepContent(activeStep)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                disabled: activeStep === 0,\n                onClick: handleBack,\n                className: classes.button,\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 8\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: handleNext,\n                className: classes.button,\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 8\n              }, this), activeStep !== steps.length && (completed[activeStep] ? /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                className: classes.completed,\n                children: [\"Step \", activeStep + 1, \" already completed\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 10\n              }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: handleComplete,\n                children: completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 10\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 3\n      }, this), \"//logic htmnl\", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"file\",\n          accept: \".csv\",\n          onChange: changeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 4\n        }, this), isFilePicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Filename: \", selectedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Filetype: \", selectedFile.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Size in bytes: \", selectedFile.size]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"lastModifiedDate:\", ' ', selectedFile.lastModifiedDate.toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 5\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a file to show details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSubmission,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 4\n        }, this), isFileSubmitted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Variables\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 6\n            }, this), isHeaderPicked ? selectedHeaders.map((e, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => {\n                saveChosenVariables(e);\n              },\n              children: e\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 11\n            }, this)) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 14\n            }, this), console.log(chosenVariables)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Graphicons\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 5\n            }, this), typesGraphicons.map((e, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => {\n                chosenGraph = e;\n                console.log(chosenGraph);\n              },\n              children: e\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 6\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              onClick: () => {\n                handleDatabase();\n              },\n              children: \"Napravi grafikon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 6\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  );\n};\n\n_s(Upload, \"khyjJCCl/9uSBEAxAUI7EZblLzs=\", false, function () {\n  return [useStyles];\n});\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["C:/Users/alens/OneDrive/Radna površina/Novi materijali/diplomski react node sql/client/src/components/UploadGraph/Upload.jsx"],"names":["React","useState","axios","makeStyles","Stepper","Step","StepButton","Button","Typography","useStyles","theme","root","width","button","marginRight","spacing","completed","display","instructions","marginTop","marginBottom","getSteps","getStepContent","step","Upload","classes","activeStep","setActiveStep","setCompleted","steps","totalSteps","length","completedSteps","Object","keys","isLastStep","allStepsCompleted","handleNext","newActiveStep","findIndex","i","handleBack","prevActiveStep","handleStep","handleComplete","newCompleted","handleReset","selectedFile","setSelectedFile","isFilePicked","setIsFilePicked","isFileSubmitted","setIsFileSubmitted","selectedHeaders","setSelectedHeaders","isHeaderPicked","setIsHeaderPicked","d","Date","chosenVariables","typesGraphicons","chosenGraph","changeHandler","event","target","files","console","log","handleSubmission","data","FormData","append","post","then","res","statusText","submit","file","reader","FileReader","onload","e","text","result","processCsv","readAsText","str","delim","slice","indexOf","split","saveChosenVariables","push","splice","handleDatabase","csvName","getDate","getMonth","name","csvname","graph","var1","var2","var3","var4","var5","map","label","index","type","size","lastModifiedDate","toLocaleDateString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n//stepper\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepButton from '@material-ui/core/StepButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t  width: '100%',\r\n\t},\r\n\tbutton: {\r\n\t  marginRight: theme.spacing(1),\r\n\t},\r\n\tcompleted: {\r\n\t  display: 'inline-block',\r\n\t},\r\n\tinstructions: {\r\n\t  marginTop: theme.spacing(1),\r\n\t  marginBottom: theme.spacing(1),\r\n\t},\r\n  }));\r\n \r\nfunction getSteps() {\r\nreturn ['Upload CSV file', 'Choose variables', 'Choose type of graphicon'];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n\tswitch (step) {\r\n\t  case 0:\r\n\t\treturn (<Button>sss</Button>);\r\n\t  case 1:\r\n\t\treturn 'Step 2: What is an ad group anyways?';\r\n\t  case 2:\r\n\t\treturn 'Step 3: This is the bit I really care about!';\r\n\t  default:\r\n\t\treturn 'Unknown step';\r\n\t}\r\n  }\r\n\r\n\r\n\r\n//logic\r\nconst Upload = () => {\r\n//stepper p2\r\n\tconst classes = useStyles();\r\n\tconst [activeStep, setActiveStep] = React.useState(0);\r\n\tconst [completed, setCompleted] = React.useState({});\r\n\tconst steps = getSteps();\r\n\r\n\tconst totalSteps = () => {\r\n\t\treturn steps.length;\r\n\t  };\r\n\r\n\tconst completedSteps = () => {\r\n\t\treturn Object.keys(completed).length;\r\n\t  };\r\n\r\n\tconst isLastStep = () => {\r\n\treturn activeStep === totalSteps() - 1;\r\n\t};\r\n\r\n\tconst allStepsCompleted = () => {\r\n\treturn completedSteps() === totalSteps();\r\n\t};\r\n\r\n\tconst handleNext = () => {\r\n\t\tconst newActiveStep =\r\n\t\t  isLastStep() && !allStepsCompleted()\r\n\t\t\t? // It's the last step, but not all steps have been completed,\r\n\t\t\t  // find the first step that has been completed\r\n\t\t\t  steps.findIndex((step, i) => !(i in completed))\r\n\t\t\t: activeStep + 1;\r\n\t\tsetActiveStep(newActiveStep);\r\n\t  };\r\n\r\n\t  const handleBack = () => {\r\n\t\tsetActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n\t  };\r\n\r\n\t  const handleStep = (step) => () => {\r\n\t\tsetActiveStep(step);\r\n\t  };\r\n\t  \r\n\t  const handleComplete = () => {\r\n\t\tconst newCompleted = completed;\r\n\t\tnewCompleted[activeStep] = true;\r\n\t\tsetCompleted(newCompleted);\r\n\t\thandleNext();\r\n\t  };\r\n\t  const handleReset = () => {\r\n\t\tsetActiveStep(0);\r\n\t\tsetCompleted({});\r\n\t  };\r\n\t  //end of steppper\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [isFilePicked, setIsFilePicked] = useState(false);\r\n\tconst [isFileSubmitted, setIsFileSubmitted] = useState(false);\r\n\tconst [selectedHeaders, setSelectedHeaders] = useState();\r\n\tconst [isHeaderPicked, setIsHeaderPicked] = useState(false);\r\n\tconst d = new Date();\r\n\tlet chosenVariables = [];\r\n\tlet typesGraphicons = ['Linijski grafikon', 'Histogram','Box plot','Scatter plot', 'Bar plot', 'Heat map'];\r\n\tlet chosenGraph = -1;\r\n\t\r\n\r\n\t\r\n   \r\n    const changeHandler = (event) => {\r\n\t\tsetSelectedFile(event.target.files[0]);\r\n\t\tconsole.log(event.target.files[0]);\r\n\t\tsetIsFilePicked(true);\r\n\t};\r\n    //uploading csv to server\r\n    const handleSubmission = () => {\r\n\t\tconsole.log(\"handleUpload started\");\r\n        const data = new FormData()\r\n        data.append('file', selectedFile)\r\n        axios.post(\"http://localhost:3001/upload\", data, {\r\n\r\n        })\r\n        .then(res => {\r\n            console.log(res.statusText);\r\n        })\r\n\t\t\r\n\t\tsubmit();\r\n\t\tsetIsFileSubmitted(true);\r\n\t};\r\n\t\r\n\r\n\r\n\r\n\t//getHeaders from selectedfile csv\r\n\tconst submit = () => {\r\n        const file = selectedFile;\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = function(e) {\r\n            const text = e.target.result;\r\n            console.log(text);\r\n\t\t\tprocessCsv(text);\r\n        }\r\n\r\n        reader.readAsText(file);\r\n    }\r\n\t\r\n\tconst processCsv = (str, delim=\",\") => {\r\n\t\tsetSelectedHeaders(  str.slice(0,str.indexOf('\\r\\n')).split(delim));\r\n\t\tsetIsHeaderPicked(true);\r\n\t\tconsole.log(selectedHeaders);\r\n\t\t\r\n\t}\r\n\r\n\r\n\r\n\t\r\n\r\n\tconst saveChosenVariables = (e) => {\r\n\t\tif(chosenVariables.indexOf(e) === -1){\r\n\t\t\tchosenVariables.push(e);\r\n\t\t\tconsole.log(chosenVariables);\r\n\t\t}\r\n\t\telse if(chosenVariables.indexOf(e) !== -1){\r\n\t\t\tchosenVariables.splice(chosenVariables.indexOf(e),1);\r\n\t\t\tconsole.log(chosenVariables);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t//Date.now() + '-' + file.originalname\r\n\t//putting csvfile name in database\r\n\tconst handleDatabase = ()=> {\r\n\t\tconsole.log(\"handleDB started\");\r\n\t\tlet csvName = d.getDate() + '-' + (d.getMonth()+1) + '-' + selectedFile.name;\r\n\t\t\r\n\t\taxios.post(\"http://localhost:3001/list\",{\r\n\t\t\tcsvname: csvName,\r\n\t\t\tgraph: chosenGraph,\r\n\t\t\tvar1: chosenVariables[0],\r\n\t\t\tvar2: chosenVariables[1],\r\n\t\t\tvar3: chosenVariables[2],\r\n\t\t\tvar4: chosenVariables[3],\r\n\t\t\tvar5: chosenVariables[4],\r\n\t\t})\r\n\t\t.then(res => {\r\n            console.log(res.statusText);\r\n        })\r\n\r\n\t\t\r\n\t\r\n\t\t// fetch(\"http://localhost:3001/list\", {\r\n\t\t// \tmethod: 'POST',\r\n\t\t// \theaders: {\r\n\t\t// \t\t'Content-Type' : 'application/json',\r\n\t\t// \t},\r\n\t\t// \tbody: JSON.stringify({csvName}),\r\n\t\t// }).catch(error => {\r\n\t\t// \tconsole.log(error);\r\n\t\t// })\r\n\t\t// .then(response => {\r\n\t\t// \tconsole.log(response);\r\n\t\t// \treturn response.text();\r\n\t\t// });\r\n\t\t\r\n\t};\r\n\r\n    return (\r\n\t\t//stepper html\r\n\t\t<>\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Stepper nonLinear activeStep={activeStep}>\r\n\t\t\t\t{steps.map((label,index) => (\r\n\t\t\t\t\t<Step key={label}>\r\n\t\t\t\t\t\t<StepButton onClick={handleStep(index)} completed={completed[index]}>\r\n\t\t\t\t\t\t\t{label}\r\n\t\t\t\t\t\t</StepButton>\r\n\t\t\t\t\t</Step>\r\n\t\t\t\t))}\r\n\t\t\t</Stepper>\r\n\t\t\t<div>\r\n\t\t\t\t{allStepsCompleted() ? (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Typography className={classes.instructions}>\r\n\t\t\t\t\t\t\tAll steps completed - youre finished\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Button onClick={handleReset}>Reset</Button>\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tonClick={handleNext}\r\n\t\t\t\t\t\t\t\tclassName={classes.button}>\r\n\t\t\t\t\t\t\t\t\tNext\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t{activeStep !== steps.length &&\r\n\t\t\t\t\t\t\t\t(completed[activeStep] ? (\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"caption\" className={classes.completed}>\r\n\t\t\t\t\t\t\t\t\t\tStep {activeStep + 1} already completed\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={handleComplete}>\r\n\t\t\t\t\t\t\t\t\t\t{completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//logic htmnl\r\n        <div>\r\n\t\t\t<input type=\"file\" name=\"file\" accept=\".csv\" onChange={changeHandler} />\r\n\t\t\t{isFilePicked ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Filename: {selectedFile.name}</p>\r\n\t\t\t\t\t<p>Filetype: {selectedFile.type}</p>\r\n\t\t\t\t\t<p>Size in bytes: {selectedFile.size}</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tlastModifiedDate:{' '}\r\n\t\t\t\t\t\t{selectedFile.lastModifiedDate.toLocaleDateString()}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<p>Select a file to show details</p>\r\n\t\t\t)}\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={ handleSubmission } >Submit</button>\r\n\t\t\t</div>\r\n\t\t\t{isFileSubmitted ? (\r\n\t\t\t\t<>\r\n\t\t\t\t<div> \r\n\t\t\t\t\t<label>Variables</label>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisHeaderPicked ? (\r\n\t\t\t\t\t\t\t\tselectedHeaders.map((e,i) => (\r\n\t\t\t\t\t\t\t\t\t\t<button key={i} type=\"button\" onClick={()=> {saveChosenVariables(e) }}>{e}</button>))\r\n\t\t\t\t\t\t\t) : ( <br/>) \r\n\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{console.log(chosenVariables)}\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t<label>Graphicons</label>\r\n\t\t\t\t{typesGraphicons.map((e,i) => (\r\n\t\t\t\t\t<button key={i} type=\"button\" onClick={() => {chosenGraph = e; console.log(chosenGraph);}}>{e}</button>\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button type=\"submit\" onClick={()=>{handleDatabase()}}>Napravi grafikon</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t\t\r\n\t\t\t) : ( <br/>) }\r\n\t\t\t\r\n\t\t\t\r\n\t\t</div>\r\n\t\t</>\r\n    )\r\n}\r\n\r\nexport default Upload;\r\n"]},"metadata":{},"sourceType":"module"}