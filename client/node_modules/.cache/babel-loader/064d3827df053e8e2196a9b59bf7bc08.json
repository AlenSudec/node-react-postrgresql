{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alens\\\\OneDrive\\\\Radna povr\\u0161ina\\\\Novi materijali\\\\diplomski react node sql\\\\client\\\\src\\\\components\\\\UploadGraph\\\\Upload.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport styles from './mystyle.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Upload = () => {\n  _s();\n\n  const [selectedFile, setSelectedFile] = useState();\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  const [isFileSubmitted, setIsFileSubmitted] = useState(false);\n  const [selectedHeaders, setSelectedHeaders] = useState();\n  const d = new Date();\n\n  const changeHandler = event => {\n    setSelectedFile(event.target.files[0]);\n    console.log(event.target.files[0]);\n    setIsFilePicked(true);\n  }; //uploading csv to server\n\n\n  const handleSubmission = () => {\n    console.log(\"handleUpload started\");\n    const data = new FormData();\n    data.append('file', selectedFile);\n    axios.post(\"http://localhost:3001/upload\", data, {}).then(res => {\n      console.log(res.statusText);\n    });\n    handleDatabase();\n    submit(); // getHeadersCsv();\n  }; //getHeaders from selectedfile csv\n\n\n  const submit = () => {\n    const file = selectedFile;\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      const text = e.target.result;\n      console.log(text);\n      processCsv(text);\n    };\n\n    reader.readAsText(file);\n  };\n\n  const processCsv = (str, delim = \",\") => {\n    setSelectedHeaders(str.slice(0, str.indexOf('\\n')).split(delim));\n    console.log(selectedHeaders); // const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n    // console.log(rows);\n    // const newArray = rows.map( row=> {\n    // \tconst values = row.split(delim);\n    // \tconst eachObject = headers.reduce((obj, header, i) => {\n    // \t\tobj[header] = values[i];\n    // \t\treturn obj;\n    // \t}, {})\n    // \treturn eachObject;\n    // })\n  }; //Date.now() + '-' + file.originalname\n  //putting csvfile name in database\n\n\n  const handleDatabase = () => {\n    console.log(\"handleDB started\");\n    let csvName = d.getDate() + '-' + (d.getMonth() + 1) + '-' + selectedFile.name;\n    let graphName = 'histogram';\n    let var1m = \"m\";\n    let var2m = \"p\";\n    let var3m = \"g\";\n    axios.post(\"http://localhost:3001/list\", {\n      csvname: csvName,\n      graph: graphName,\n      var1: var1m,\n      var2: var2m,\n      var3: var3m\n    }).then(res => {\n      console.log(res.statusText);\n    });\n    setIsFileSubmitted(true); // fetch(\"http://localhost:3001/list\", {\n    // \tmethod: 'POST',\n    // \theaders: {\n    // \t\t'Content-Type' : 'application/json',\n    // \t},\n    // \tbody: JSON.stringify({csvName}),\n    // }).catch(error => {\n    // \tconsole.log(error);\n    // })\n    // .then(response => {\n    // \tconsole.log(response);\n    // \treturn response.text();\n    // });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      accept: \".csv\",\n      onChange: changeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 4\n    }, this), isFilePicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Filename: \", selectedFile.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Filetype: \", selectedFile.type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Size in bytes: \", selectedFile.size]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"lastModifiedDate:\", ' ', selectedFile.lastModifiedDate.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select a file to show details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmission,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 4\n    }, this), isFileSubmitted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Variables\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 6\n      }, this), selectedHeaders.map(e => /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        children: e\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Upload, \"6ZjIc1hTMQ5VsLlkYbtvf5qEA+s=\");\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["C:/Users/alens/OneDrive/Radna povr≈°ina/Novi materijali/diplomski react node sql/client/src/components/UploadGraph/Upload.jsx"],"names":["React","useState","axios","styles","Upload","selectedFile","setSelectedFile","isFilePicked","setIsFilePicked","isFileSubmitted","setIsFileSubmitted","selectedHeaders","setSelectedHeaders","d","Date","changeHandler","event","target","files","console","log","handleSubmission","data","FormData","append","post","then","res","statusText","handleDatabase","submit","file","reader","FileReader","onload","e","text","result","processCsv","readAsText","str","delim","slice","indexOf","split","csvName","getDate","getMonth","name","graphName","var1m","var2m","var3m","csvname","graph","var1","var2","var3","type","size","lastModifiedDate","toLocaleDateString","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAIA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAEjB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,EAAhD;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,KAAD,CAAhD;AACH,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,EAAtD;AACA,QAAMY,CAAC,GAAG,IAAIC,IAAJ,EAAV;;AAKG,QAAMC,aAAa,GAAIC,KAAD,IAAW;AACnCV,IAAAA,eAAe,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAD,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAZ;AACAV,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,GAJE,CAXiB,CAgBjB;;;AACA,QAAMa,gBAAgB,GAAG,MAAM;AACjCF,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACM,UAAME,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBnB,YAApB;AACAH,IAAAA,KAAK,CAACuB,IAAN,CAAW,8BAAX,EAA2CH,IAA3C,EAAiD,EAAjD,EAGCI,IAHD,CAGMC,GAAG,IAAI;AACTR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,UAAhB;AACH,KALD;AAMNC,IAAAA,cAAc;AACdC,IAAAA,MAAM,GAX2B,CAYjC;AACA,GAbE,CAjBiB,CAmCpB;;;AACA,QAAMA,MAAM,GAAG,MAAM;AACd,UAAMC,IAAI,GAAG1B,YAAb;AACA,UAAM2B,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,UAASC,CAAT,EAAY;AACxB,YAAMC,IAAI,GAAGD,CAAC,CAAClB,MAAF,CAASoB,MAAtB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,IAAZ;AACTE,MAAAA,UAAU,CAACF,IAAD,CAAV;AACM,KAJD;;AAMAJ,IAAAA,MAAM,CAACO,UAAP,CAAkBR,IAAlB;AACH,GAXJ;;AAaA,QAAMO,UAAU,GAAG,CAACE,GAAD,EAAMC,KAAK,GAAC,GAAZ,KAAoB;AACtC7B,IAAAA,kBAAkB,CAAG4B,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAYF,GAAG,CAACG,OAAJ,CAAY,IAAZ,CAAZ,EAA+BC,KAA/B,CAAqCH,KAArC,CAAH,CAAlB;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAYT,eAAZ,EAFsC,CAItC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAfD,CAjDoB,CAoEpB;AACA;;;AACA,QAAMkB,cAAc,GAAG,MAAK;AAC3BV,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,QAAIyB,OAAO,GAAGhC,CAAC,CAACiC,OAAF,KAAc,GAAd,IAAqBjC,CAAC,CAACkC,QAAF,KAAa,CAAlC,IAAuC,GAAvC,GAA6C1C,YAAY,CAAC2C,IAAxE;AACA,QAAIC,SAAS,GAAG,WAAhB;AACA,QAAIC,KAAK,GAAC,GAAV;AACA,QAAIC,KAAK,GAAC,GAAV;AACA,QAAIC,KAAK,GAAC,GAAV;AACAlD,IAAAA,KAAK,CAACuB,IAAN,CAAW,4BAAX,EAAwC;AACvC4B,MAAAA,OAAO,EAAER,OAD8B;AAEvCS,MAAAA,KAAK,EAAEL,SAFgC;AAGvCM,MAAAA,IAAI,EAAEL,KAHiC;AAIvCM,MAAAA,IAAI,EAAEL,KAJiC;AAKvCM,MAAAA,IAAI,EAAEL;AALiC,KAAxC,EAOC1B,IAPD,CAOMC,GAAG,IAAI;AACHR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,UAAhB;AACH,KATP;AAWAlB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB,CAlB2B,CAoB3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAlCD;;AAuCG,sBACI;AAAA,4BACL;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,MAAM,EAAC,MAAtC;AAA6C,MAAA,QAAQ,EAAEK;AAAvD;AAAA;AAAA;AAAA;AAAA,YADK,EAEJR,YAAY,gBACZ;AAAA,8BACC;AAAA,iCAAcF,YAAY,CAAC2C,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAA,iCAAc3C,YAAY,CAACqD,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAA,sCAAmBrD,YAAY,CAACsD,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD,eAIC;AAAA,wCACmB,GADnB,EAEEtD,YAAY,CAACuD,gBAAb,CAA8BC,kBAA9B,EAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA,YADY,gBAWZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbI,eAeL;AAAA,6BACC;AAAQ,QAAA,OAAO,EAAGxC,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAfK,EAkBJZ,eAAe,gBACf;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,EAEEE,eAAe,CAACmD,GAAhB,CAAqB3B,CAAD,iBACpB;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA,kBAAuBA;AAAvB;AAAA;AAAA;AAAA;AAAA,cADA,CAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADe,gBAOV;AAAA;AAAA;AAAA;AAAA,YAzBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH,CA1ID;;GAAM/B,M;;KAAAA,M;AA4IN,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './mystyle.module.css'; \r\n\r\n\r\n\r\nconst Upload = () => {\r\n\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [isFilePicked, setIsFilePicked] = useState(false);\r\n\tconst [isFileSubmitted, setIsFileSubmitted] = useState(false);\r\n\tconst [selectedHeaders, setSelectedHeaders] = useState();\r\n\tconst d = new Date();\r\n\t\r\n\r\n\t\r\n   \r\n    const changeHandler = (event) => {\r\n\t\tsetSelectedFile(event.target.files[0]);\r\n\t\tconsole.log(event.target.files[0]);\r\n\t\tsetIsFilePicked(true);\r\n\t};\r\n    //uploading csv to server\r\n    const handleSubmission = () => {\r\n\t\tconsole.log(\"handleUpload started\");\r\n        const data = new FormData()\r\n        data.append('file', selectedFile)\r\n        axios.post(\"http://localhost:3001/upload\", data, {\r\n\r\n        })\r\n        .then(res => {\r\n            console.log(res.statusText);\r\n        })\r\n\t\thandleDatabase();\r\n\t\tsubmit();\r\n\t\t// getHeadersCsv();\r\n\t};\r\n\t\r\n\r\n\r\n\r\n\t//getHeaders from selectedfile csv\r\n\tconst submit = () => {\r\n        const file = selectedFile;\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = function(e) {\r\n            const text = e.target.result;\r\n            console.log(text);\r\n\t\t\tprocessCsv(text);\r\n        }\r\n\r\n        reader.readAsText(file);\r\n    }\r\n\t\r\n\tconst processCsv = (str, delim=\",\") => {\r\n\t\tsetSelectedHeaders(  str.slice(0,str.indexOf('\\n')).split(delim));\r\n\t\tconsole.log(selectedHeaders);\r\n\t\t\r\n\t\t// const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\r\n\t\t// console.log(rows);\r\n\r\n\t\t// const newArray = rows.map( row=> {\r\n\t\t// \tconst values = row.split(delim);\r\n\t\t// \tconst eachObject = headers.reduce((obj, header, i) => {\r\n\t\t// \t\tobj[header] = values[i];\r\n\t\t// \t\treturn obj;\r\n\t\t// \t}, {})\r\n\t\t// \treturn eachObject;\r\n\t\t// })\r\n\t}\r\n\r\n\r\n\r\n\t//Date.now() + '-' + file.originalname\r\n\t//putting csvfile name in database\r\n\tconst handleDatabase = ()=> {\r\n\t\tconsole.log(\"handleDB started\");\r\n\t\tlet csvName = d.getDate() + '-' + (d.getMonth()+1) + '-' + selectedFile.name;\r\n\t\tlet graphName = 'histogram';\r\n\t\tlet var1m=\"m\";\r\n\t\tlet var2m=\"p\";\r\n\t\tlet var3m=\"g\";\r\n\t\taxios.post(\"http://localhost:3001/list\",{\r\n\t\t\tcsvname: csvName,\r\n\t\t\tgraph: graphName,\r\n\t\t\tvar1: var1m,\r\n\t\t\tvar2: var2m,\r\n\t\t\tvar3: var3m,\r\n\t\t})\r\n\t\t.then(res => {\r\n            console.log(res.statusText);\r\n        })\r\n\r\n\t\tsetIsFileSubmitted(true);\r\n\t\r\n\t\t// fetch(\"http://localhost:3001/list\", {\r\n\t\t// \tmethod: 'POST',\r\n\t\t// \theaders: {\r\n\t\t// \t\t'Content-Type' : 'application/json',\r\n\t\t// \t},\r\n\t\t// \tbody: JSON.stringify({csvName}),\r\n\t\t// }).catch(error => {\r\n\t\t// \tconsole.log(error);\r\n\t\t// })\r\n\t\t// .then(response => {\r\n\t\t// \tconsole.log(response);\r\n\t\t// \treturn response.text();\r\n\t\t// });\r\n\t\t\r\n\t};\r\n\r\n\t\r\n\r\n\r\n    return (\r\n        <div>\r\n\t\t\t<input type=\"file\" name=\"file\" accept=\".csv\" onChange={changeHandler} />\r\n\t\t\t{isFilePicked ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Filename: {selectedFile.name}</p>\r\n\t\t\t\t\t<p>Filetype: {selectedFile.type}</p>\r\n\t\t\t\t\t<p>Size in bytes: {selectedFile.size}</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tlastModifiedDate:{' '}\r\n\t\t\t\t\t\t{selectedFile.lastModifiedDate.toLocaleDateString()}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<p>Select a file to show details</p>\r\n\t\t\t)}\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={ handleSubmission } >Submit</button>\r\n\t\t\t</div>\r\n\t\t\t{isFileSubmitted ? (\r\n\t\t\t\t<div> \r\n\t\t\t\t\t<label>Variables</label>\r\n\t\t\t\t\t{selectedHeaders.map((e) => (\r\n\t\t\t\t\t\t<button type=\"button\">{e}</button>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t) : ( <br/>) }\r\n\t\t</div>\r\n    )\r\n}\r\n\r\nexport default Upload;\r\n"]},"metadata":{},"sourceType":"module"}